<html>
<body>
<div class="map-header">
  <h1>24/7 Dynamic Amenities</h1>
    <p>The final piece of the puzzle - tying together River North, Restaurant Row and the Milwaukee Corridor</p>
</div>

<div id='map-container'>
<div id='map'>
</div>
</div>

<script src='//d3js.org/d3.v3.min.js' charset='utf-8'></script>

<script>
mapboxgl.accessToken =
  'pk.eyJ1IjoibXBvdHRlciIsImEiOiJjajAxZGltM3UwNjF2MzJsczVnN3R2eTNnIn0._Sj0HRLt8VTQGTojMWYFfQ';
var map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mpotter/cjsvs21w60gjk1fmovfg87xhb',
  center: [-87.636127, 41.892699],
  zoom: 13.0,
  attributionControl:false
  });

map.on('load', function() {

d3.json("/data/issued.geojson", function(err, data) {
if (err) throw err;

map.addSource('retail', {
  'type': 'geojson',
  data: data,
  data: data,
  cluster: true,
  clusterMaxZoom: 14, // Max zoom to cluster points on
  clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
});

  map.addLayer({
  id: "clusters",
  type: "circle",
  source: "retail",
  filter: ["has", "point_count"],
  paint: {
  // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
  // with three steps to implement three types of circles:
  //   * Blue, 20px circles when point count is less than 100
  //   * Yellow, 30px circles when point count is between 100 and 750
  //   * Pink, 40px circles when point count is greater than or equal to 750
  "circle-color": [
  "step",
  ["get", "point_count"],
  "#51bbd6",
  50,
  "#f1f075",
  200,
  "#f28cb1"
  ],
  "circle-radius": [
  "step",
  ["get", "point_count"],
  20,
  50,
  30,
  200,
  40
  ]
  }
  });

  map.addLayer({
  id: "cluster-count",
  type: "symbol",
  source: "retail",
  filter: ["has", "point_count"],
  layout: {
  "text-field": "{point_count_abbreviated}",
  "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
  "text-size": 12
  }
  });

  map.addLayer({
  id: "unclustered-point",
  type: "circle",
  source: "retail",
  filter: ["!", ["has", "point_count"]],
  paint: {
  "circle-color": "#11b4da",
  "circle-radius": 4,
  "circle-stroke-width": 1,
  "circle-stroke-color": "#fff"
  }
  });

  map.addLayer({
    'id': 'retail-labels',
    'type': 'symbol',
    'source': 'retail',
    'layout': {
      'text-field': ['to-string', ['get', 'Name']],
      'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],
      'text-size': 8
      },
    'paint': {
      'text-color': 'rgba(0,0,0,0.5)',
      'text-halo-color': '#ccd912',
      'text-halo-width': 2
      }
    });

  // inspect a cluster on click
  map.on('click', 'clusters', function (e) {
  var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
  var clusterId = features[0].properties.cluster_id;
  map.getSource('retail').getClusterExpansionZoom(clusterId, function (err, zoom) {
  if (err)
  return;

  map.easeTo({
  center: features[0].geometry.coordinates,
  zoom: zoom
  });
  });
  });

  map.on('mouseenter', 'clusters', function () {
  map.getCanvas().style.cursor = 'pointer';
  });
  map.on('mouseleave', 'clusters', function () {
  map.getCanvas().style.cursor = '';
  });
  });
});

//code for Mapbox GL Marker Blip, to be refactored

  var framesPerSecond = 15;
  var initialOpacity = 1
  var opacity = initialOpacity;
  var initialRadius = 10;
  var radius = initialRadius;
  var maxRadius = 50;

  map.on('load', function () {

      // Add a source and layer displaying a point which will be animated in a circle.
      map.addSource('point', {
          "type": "geojson",
          "data": {
              "type": "Point",
              "coordinates": [
                  -87.646196, 41.895594
              ]
          }
      });

      map.addLayer({
          "id": "point",
          "source": "point",
          "type": "circle",
          "paint": {
              "circle-radius": initialRadius,
              "circle-radius-transition": {duration: 0},
              "circle-opacity-transition": {duration: 0},
              "circle-color": "#ffffff"
          }
      });

      map.addLayer({
          "id": "point1",
          "source": "point",
          "type": "circle",
          "paint": {
              "circle-radius": initialRadius,
              "circle-color": "#007cbf"
          }
      });


      function animateMarker(timestamp) {
          setTimeout(function(){
              requestAnimationFrame(animateMarker);

              radius += (maxRadius - radius) / framesPerSecond;
              opacity -= ( .9 / framesPerSecond );

              map.setPaintProperty('point', 'circle-radius', radius);
              map.setPaintProperty('point', 'circle-opacity', opacity);

              if (opacity <= 0) {
                  radius = initialRadius;
                  opacity = initialOpacity;
              }

          }, 1000 / framesPerSecond);

      }
      // Start the animation.
      animateMarker(0);
  });
  map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');
</script>
</body>
</html>
