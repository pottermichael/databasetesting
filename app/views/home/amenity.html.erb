<html>
<body>
<div id='map'></div>
  <nav id="menu"></nav>
<div id='console'>
  <h1>City of Chicago</h1>
  <h4>Retail/Food Permits</h4>
  <h5>Dept of Business Affairs</h5>
  <div class ='session'>
    <h1>Issued: 2010 - <label id='year'>2019</label></h1>
    <input id='slider' class='row' type='range' min='2010' max='2019' step='1' value='2019'/>
  </div>

  <div class='session'>
    <h2>Permit Type</h2>
    <div class='row' id='filters'>
      <input id='all' type='radio' name='toggle' value='all' checked='checked'>
      <label for='all'>All</label>
      <input id="Issue" type="radio" name="toggle" value="Issue">
      <label for='Issue'>Issue</label>
      <input id="Renew" type="radio" name="toggle" value="Renew">
      <label for='Renew'>Renew</label>
    </div>
  </div>
</div>

<script>
mapboxgl.accessToken =
  'pk.eyJ1IjoibXBvdHRlciIsImEiOiJjajAxZGltM3UwNjF2MzJsczVnN3R2eTNnIn0._Sj0HRLt8VTQGTojMWYFfQ';
var map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mpotter/cjz1cb1us653x1dmafmwpkcsa',
  center: [-87.636127, 41.892699],
  zoom: 12.25,
  attributionControl:false
  });

map.on('load', function() {
var filterYear = ['<=',['number',['get','Year']], year];
var filterType = ['!=', ['string', ['get', 'Type']], 'placeholder'];

// Create a year property value based on time used to filter against.
d3.json("/data/issued6.geojson", function(err, data) {
if (err) throw err;
data.features = data.features.map(function(d) {
  d.properties.year = new Date(d.properties);
  return d;
});


map.addSource('retail', {
  'type': 'geojson',
  data: data,
  cluster: false,
  clusterMaxZoom: 14, // Max zoom to cluster points on
  clusterRadius: 65 // Radius of each cluster when clustering points (defaults to 50)
});

  map.addLayer({
  'id': "clusters",
  'type': "circle",
  'source': "retail",
  'filter': ["has", "point_count"],
  'paint': {
  // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
  // with three steps to implement three types of circles:
  //   * Blue, 20px circles when point count is less than 100
  //   * Yellow, 30px circles when point count is between 100 and 750
  //   * Pink, 40px circles when point count is greater than or equal to 750
    "circle-color": [
      "step",
      ["get", "point_count"],
        "#51bbd6",
        100,
        "#f1f075",
        300,
        "#f28cb1"
        ],
    "circle-radius": [
      "step",
      ["get", "point_count"],
        20,
        100,
        30,
        300,
        40
        ]
      }
    });

  map.addLayer({
    'id': "cluster-count",
    'type': "symbol",
    'source': "retail",
    'filter': ["has", "point_count"],
    'layout': {
      "text-field": "{point_count_abbreviated}",
      "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
      "text-size": 12
      }
    });

  map.addLayer({
    'id': "unclustered-point",
    'type': "circle",
    'source': "retail",
    'filter': ["!", ["has", "point_count"]],
    'paint': {
        "circle-color": "#11b4da",
        "circle-radius": 4,
        "circle-stroke-width": 1,
        "circle-stroke-color": "#fff"
      }
    });

  map.addLayer({
    'id': 'retail-labels',
    'type': 'symbol',
    'source': 'retail',
    'layout': {
      'text-field': ['to-string', ['get', 'Name']],
      'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],
      'text-size': [
          'interpolate',
          ['linear'],
          ['zoom'],
          13, 0,
          14, 6,
          15, 8,
          15.5, 10,
          16, 14,
          17, 10,
      ],
      'text-max-width': 5
      },
    'paint': {
      'text-color': 'rgba(0,0,0,0.5)',
      'text-halo-color': '#ccd912',
      'text-halo-width': 2
      }
    });

  // inspect a cluster on click
  map.on('click', 'clusters', function (e) {
      var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
      var clusterId = features[0].properties.cluster_id;
      map.getSource('retail').getClusterExpansionZoom(clusterId, function (err, zoom)
      {
        if (err)
          return;

      map.easeTo({
      center: features[0].geometry.coordinates,
      zoom: zoom
      });
    });
  });

    map.on('mouseenter', 'clusters', function () {
        map.getCanvas().style.cursor = 'pointer';
    });
    map.on('mouseleave', 'clusters', function () {
        map.getCanvas().style.cursor = '';
    });
  // blipper
  map.addSource('point', {
      "type": "geojson",
      "data": {
          "type": "Point",
          "coordinates": [
              -87.646196, 41.895594
          ]
      }
  });
  map.addLayer({
      "id": "point",
      "source": "point",
      "type": "circle",
      "paint": {
          "circle-radius": initialRadius,
          "circle-radius-transition": {duration: 0},
          "circle-opacity-transition": {duration: 0},
          "circle-color": "#ffffff"
      }
  });
  map.addLayer({
      "id": "point1",
      "source": "point",
      "type": "circle",
      "paint": {
          "circle-radius": initialRadius,
          "circle-color": "#007cbf"
      }
  });

// function to filter by year. Create variables to filter year and filtering by type, then apply variables to set the filter
function filterBy(year) {
  var filterYear = ['<=',['number',['get','Year']], year];
  var filterType = ['!=', ['string', ['get', 'Type']], 'placeholder'];
    map.setFilter('unclustered-point', filterYear);
    map.setFilter('retail-labels', filterYear);

}
// Set filter to lastt year of the range to show all amenities
// 0 = 2019
filterBy(2019);
  document.getElementById('slider').addEventListener('input', function(e) {
    var year = parseInt(e.target.value);
    // update the map
    filterYear = ['<=', ['number', ['get', 'Year']], year];
    map.setFilter('unclustered-point', ['all', filterYear, filterType]);
    map.setFilter('retail-labels', ['all', filterYear, filterType]);


  document.getElementById('year').innerText = year;

  });
  // radio buttons for filtering
  document.getElementById('filters').addEventListener('change', function(e) {
    var type = e.target.value;
    // update the map filter
    if (type === 'all') {
      filterType = ['!=', ['string', ['get', 'Type']], 'placeholder'];
    } else if (type === 'Issue') {
      filterType = ['match', ['get', 'Type'], 'Issue', true, false];
    } else if (type === 'Renew') {
      filterType = ['match', ['get', 'Type'], 'Renew', true, false];
    } else {
      console.log('error');
    };
    map.setFilter('unclustered-point', ['all', filterYear, filterType]);
    map.setFilter('retail-labels', ['all', filterYear, filterType]);
  });

// Start the animation from javascript
animateMarker(0);
});
});
</script>
</body>
</html>
