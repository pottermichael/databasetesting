<!DOCTYPE html>
<html>
<head>
  <meta charset='utf-8' />
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
<style>

#map {
    top:0;
    height: 100vh;
    width:100vw;
    position: fixed;
    z-index: -5;
}
#header {
    margin: 3vh auto;
    width: 90vw;
    padding: 2vh;
    text-align: center;
}
#footer {
    width: 100%;
    min-height: 5vh;
    padding-top: 2vh;
    padding-bottom: 2vh;
    text-align: center;
    line-height: 25px;
    font-size: 13px;
}
#features {
    padding-top: 10vh;
    padding-bottom: 10vh;
    z-index: 100;
}
.centered {
    width: 50vw;
    margin: 0 auto;
}
.lefty {
    width: 33vw;
    margin-left: 5vw;
}
.righty {
    width: 33vw;
    margin-left: 62vw;
}
.light {
    color: rgb(70,136,71);
    background-color: #242426;
    opacity: 1;
}
.dark {
    color: #fafafa;
    background-color: #444;
}
.step {
    padding-bottom: 50vh;
    /* margin-bottom: 10vh; */
    opacity: 0.25;
}
.step.active {
    opacity: 0.9;
}

.step div {
    padding:  25px 50px;
    line-height: 25px;
    font-size: 13px;
}

.step img {
    width: 100%;
}

@media (max-width: 750px) {
    #features {
        width: 90vw;
        margin: 0 auto;
    }
}
  </style>
</head>

<body>
<div id="map"></div>
<div class='map-overlay'>
    <h1>Year:
      <label id='year'></label>
    </h1>
    <div id="slider"></div>
    <button id="play-button">Play</button>
</div>
<div id="story"></div>
<script src="./config.js"></script>
<script src="//d3js.org/d3.v4.min.js" charset='utf-8'></script>
<script>
var layerTypes = {
    'fill': ['fill-opacity'],
    'line': ['line-opacity'],
    'circle': ['circle-opacity', 'circle-stroke-opacity'],
    'symbol': ['icon-opacity', 'text-opacity'],
    'raster': ['raster-opacity'],
    'fill-extrusion': ['fill-extrusion-opacity']
}

var alignments = {
    'left': 'lefty',
    'center': 'centered',
    'right': 'righty'
}

function getLayerPaintType(layer) {
    var layerType = map.getLayer(layer).type;
    return layerTypes[layerType];
}

function setLayerOpacity(layer) {
    var paintProps = getLayerPaintType(layer.layer);
    paintProps.forEach(function(prop) {
        map.setPaintProperty(layer.layer, prop, layer.opacity);
    });
}

var story = document.getElementById('story');
var features = document.createElement('div');
features.classList.add(alignments[config.alignment]);
features.setAttribute('id', 'features');

var header = document.createElement('div');

if (config.title) {
    var titleText = document.createElement('h1');
    titleText.innerText = config.title;
    header.appendChild(titleText);
}

if (config.subtitle) {
    var subtitleText = document.createElement('h2');
    subtitleText.innerText = config.subtitle;
    header.appendChild(subtitleText);
}

if (config.byline) {
    var bylineText = document.createElement('p');
    bylineText.innerText = config.byline;
    header.appendChild(bylineText);
}

if (header.innerText.length > 0) {
    header.classList.add(config.theme);
    header.setAttribute('id', 'header');
    story.appendChild(header);
}

config.chapters.forEach((record, idx) => {
    var container = document.createElement('div');
    var chapter = document.createElement('div');

    if (record.title) {
        var title = document.createElement('h3');
        title.innerText = record.title;
        chapter.appendChild(title);
    }

    if (record.image) {
        var image = new Image();
        image.src = record.image;
        chapter.appendChild(image);
    }

    if (record.description) {
        var story = document.createElement('p');
        story.innerHTML = record.description;
        chapter.appendChild(story);
    }

    container.setAttribute('id', record.id);
    container.classList.add('step');
    if (idx === 0) {
        container.classList.add('active');
    }

    chapter.classList.add(config.theme);
    container.appendChild(chapter);
    features.appendChild(container);
});

story.appendChild(features);

var footer = document.createElement('div');

if (config.footer) {
    var footerText = document.createElement('p');
    footerText.innerHTML = config.footer;
    footer.appendChild(footerText);
}

if (footer.innerText.length > 0) {
    footer.classList.add(config.theme);
    footer.setAttribute('id', 'footer');
    story.appendChild(footer);
}

mapboxgl.accessToken = config.accessToken;

const transformRequest = (url) => {
    const hasQuery = url.indexOf("?") !== -1;
    const suffix = hasQuery ? "&pluginName=journalismScrollytelling" : "?pluginName=journalismScrollytelling";
    return {
      url: url + suffix
    }
}

var map = new mapboxgl.Map({
    container: 'map',
    style: config.style,
    center: config.chapters[0].location.center,
    zoom: config.chapters[0].location.zoom,
    bearing: config.chapters[0].location.bearing,
    pitch: config.chapters[0].location.pitch,
    scrollZoom: false,
    transformRequest: transformRequest
});

var marker = new mapboxgl.Marker();
if (config.showMarkers) {
    marker.setLngLat(config.chapters[0].location.center).addTo(map);
}

// instantiate the scrollama
var scroller = scrollama();

//create array of numbers representing range of years to filter through
var years = [
  1999,
  2000,
  2001,
  2002,
  2003,
  2004,
  2005,
  2006,
  2007,
  2008,
  2009,
  2010,
  2011,
  2012,
  2013,
  2014,
  2015,
  2016,
  2017,
  2018,
  2019,
  2020,
  2021,
  2022,
  2023,
  2024
];
console.log(years)

var yearMax = years.reduce(function (a, b) {
  return Math.max(a, b);
});
console.log(yearMax)

var yearMin = years.reduce(function (a, b) {
  return Math.min(a, b);
});
console.log(yearMin)

function filterBy(year) {
  var filterYear = ['<=',['number',['get', 'year']],year];
  map.setFilter('property-circles', filterYear);
  map.setFilter('property-labels', filterYear);

  // Set the label to the month
  document.getElementById('year').innerText = year;
  console.log(year)
}

map.on("load", function() {
    // setup the instance, pass callback functions
    scroller
    .setup({
        step: '.step',
        offset: 0.5,
        progress: true
    })
    .onStepEnter(response => {
        var chapter = config.chapters.find(chap => chap.id === response.element.id);
        response.element.classList.add('active');
        map.flyTo(chapter.location);
        if (config.showMarkers) {
            marker.setLngLat(chapter.location.center);
        }
        if (chapter.onChapterEnter.length > 0) {
            chapter.onChapterEnter.forEach(setLayerOpacity);
        }
    })
    .onStepExit(response => {
        var chapter = config.chapters.find(chap => chap.id === response.element.id);
        response.element.classList.remove('active');
        if (chapter.onChapterExit.length > 0) {
            chapter.onChapterExit.forEach(setLayerOpacity);
        }
    });

    //load data for historical supply
    d3.json("/data/supply.geojson", function (err, data) {
      if (err)
        throw err;
    //create layers for filtering by year and display scaled circles and property labels
        map.addSource('delivered', {'type': 'geojson',data: data});
        map.addLayer({
          'id': 'property-circles',
          'type': 'circle',
          'source': 'delivered',
          'paint': {
            'circle-color': [
              'match',
              [
                'get', 'use'
              ],
              'Resi',
              '#fbb03b',
              'Office',
              '#0E9447',
              /*other*/
              '#ccc'
            ],
            'circle-opacity': .75,
            'circle-radius': [
              'interpolate',
              ['linear'],
              [
                'number',
                [
                  'get', 'gfa'
                ]
              ],
              50000,
              7.5,
              1500000,
              35
            ]
          }
        });
        map.addLayer({
          'id': 'property-labels',
          'type': 'symbol',
          'source': 'delivered',
          'layout': {
            'text-field': [
              'to-string',
              [
                'get', 'project'
              ]
            ],
            'text-font': [
              'Open Sans Bold', 'Arial Unicode MS Bold'
            ],
            'text-size': [
              'interpolate',
              ['linear'],
              ['zoom'],
              4,
              9,
              6,
              12
            ],
            'text-max-width': 5
          },
          'paint': {
            'text-color': 'rgba(0,0,0,0.5)'
          }
        });

        // Set filter to first year of the array 0 = 1999
        filterBy(1999);
        // D3 slider and play button
        var margin = {
            top: 50,
            right: 10,
            bottom: 0,
            left: 10
          },

        width = document.getElementById('slider').clientWidth - margin.left - margin.right,
        height = 50 - margin.top - margin.bottom;

        var moving = false;
        var currentValue = 0;
        var targetValue = width;
        console.log(width);
        var slider = d3.select("#slider").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).attr("transform", "translate(" + 0 + "," + height + ")");

        var playButton = d3.select("#play-button");
        var x = d3.scaleLinear(). //建立映射关系
        domain([yearMin, yearMax]).range([0, targetValue]).clamp(true);

        slider.append("line").attr("class", "track").attr("x1", x.range()[0]).attr("x2", x.range()[1]).select(function () {
          return this.parentNode.appendChild(this.cloneNode(true));
        }).attr("class", "track-inset").select(function () {
          return this.parentNode.appendChild(this.cloneNode(true));
        }).attr("class", "track-overlay").call(d3.drag().on("start.interrupt", function () {
          slider.interrupt();
        }).on("start drag", function () {
          currentValue = d3.event.x;
          update(x.invert(currentValue));
        }));

        slider.insert("g", ".track-overlay").attr("class", "ticks").attr("transform", "translate(0," + 18 + ")").selectAll("text").data(x.ticks(5)).enter().append("text").attr("x", x).attr("y", 10).attr("text-anchor", "middle").text(function (d) {
          return (d + 1);
        });

        var handle = slider.insert("circle", ".track-overlay").attr("class", "handle").attr("r", 9);

        var labels = slider.append("g").append("text").attr("class", "labels").attr("text-anchor", "middle").text(years[0]).attr("transform", "translate(0," + (
          -15
        ) + ")").style("fill", "#4F442B")

        playButton.on("click", function () {
          var button = d3.select(this);
          if (button.text() == "Pause") {
            moving = false;
            clearInterval(timer);
            // timer = 0;
            button.text("Play");
          } else {
            moving = true;
            timer = setInterval(step, 500); //调用interval周期函数
            button.text("Pause");
          }
          console.log("Slider moving: " + moving); //判定是否在运动
        })

        function step() {
          update(x.invert(currentValue));
          currentValue = currentValue + (targetValue / (years.length));

          if (currentValue > targetValue) {
            moving = false;
            currentValue = 0;
            clearInterval(timer);
            // timer = 0;
            playButton.text("Play");
            // console.log("Slider moving: " + moving);
          }
        }

        function update(year) {
          var year = parseInt(year, 10);
          handle.attr("cx", x(year));
          labels.attr("x", x(year)).text(years[year]);
          filterBy(year);
        }


    //3d building layer on zoom
    map.addLayer({
        'id': '3d-buildings',
        'source': 'composite',
        'source-layer': 'building',
        'filter': ['==', 'extrude', 'true'],
        'type': 'fill-extrusion',
        'minzoom': 11,
        'paint': {
            'fill-extrusion-color': '#aaa',
            // use an 'interpolate' expression to add a smooth transition effect to the
            // buildings as the user zooms in
            'fill-extrusion-height': [
                "interpolate", ["linear"], ["zoom"],
                15, 0,
                15.05, ["get", "height"]
              ],
            'fill-extrusion-base': [
              "interpolate", ["linear"], ["zoom"],
                15, 0,
                15.05, ["get", "min_height"]
              ],
            'fill-extrusion-opacity': .6
            }
        });

        //add layers for blip
        map.addSource('point', {
            "type": "geojson",
            "data": {
                "type": "Point",
                "coordinates": [-87.64589, 41.89474]
            }
        });
        map.addLayer({
            "id": "point",
            "source": "point",
            "type": "circle",
            "paint": {
                "circle-radius": initialRadius,
                "circle-radius-transition": {duration: 0},
                "circle-opacity-transition": {duration: 0},
                "circle-color": "#ffffff"
            }
        });
        map.addLayer({
            "id": "point1",
            "source": "point",
            "type": "circle",
            "paint": {
                "circle-radius": initialRadius,
                "circle-color": "#007cbf"
            }
        });
        animateMarker(0);
});
});

// setup resize event
window.addEventListener('resize', scroller.resize);

</script>

</body>
</html>
